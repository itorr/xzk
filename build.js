

const UglifyJS = require('uglify-js');
const { minify } = require('html-minifier');
const Less = require('less');
const { readFileSync, writeFileSync, existsSync, mkdirSync, copyFileSync } = require('fs');


const ver = Math.floor(+new Date()/10000).toString(36);
const replaceVersion = text => text.replace(/\{version\}/g,ver);



const fixJSText = jsText=>{
    jsText = jsText.replace(/<!--.+?-->/g,'');
    jsText = `(_=>{${jsText}})()`;

    const minified = UglifyJS.minify({
        'document.js':jsText
    },{
        warnings: true,
        toplevel: true,
        compress: {
            dead_code: true,
            unused: true,
            pure_getters: true,
            drop_console: true,
            passes: 3
        }
    })
    if(!minified.code){
        throw minified;
    }
    jsText = minified.code;

    return jsText;
}

const fixHTML = html=>{
    // html = html.replace(/<style[\s\S]+<\/style>/ig,all=>all.replace(/\n\s{0,}/g,''));
    html = replaceVersion(html);

    html = html.replace(/<!-- javascript:c\.js -->[\s\S]+?<!-- javascript:c\.js -->/,`<script src="c.js?v=${ver}"></script>`);
    html = html.replace(/document.css/,`i.css?v=${ver}`);
    html = html.replace(/\n\s{0,}\n/g,'\n');
    // console.log(html)
    const options = {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
    };
    
    html = minify(html,options);
    return html;    
}






const readerLESS = async (text)=>{
    const cssText = await Less.render(
        text,
        {
            optimization: 1,
            compress: true,
            yuicompress: false,
        }
    );
    return cssText.css
}


const build = async ()=>{
    if(!existsSync('dist/')){
        mkdirSync('dist/');
    }
    
    let jsText = readFileSync('html/glfx.js','utf8') + readFileSync('html/document.js','utf8');
    jsText = fixJSText(jsText);
    writeFileSync('dist/c.js',jsText,'utf8');
    
    
    let html = readFileSync('html/index.html','utf8');
    html = fixHTML(html);
    writeFileSync('dist/index.html',html,'utf8');
    
    
    let cssText = readFileSync('html/document.less','utf8')
    cssText = await readerLESS(cssText);
    cssText = cssText.replace('logo.svg',()=>{
        let logoSVGText = readFileSync('html/logo.svg','utf8');
        logoSVGText = logoSVGText.replace('<?xml version="1.0" encoding="utf-8"?>','');
        logoSVGText = logoSVGText.replace(/\n\s{0,}\n/g,'\n');
        logoSVGText = logoSVGText.replace(/\n/g,'');
        // logoSVGText = logoSVGText.trim();
        logoSVGText = logoSVGText.replace(/(viewBox|d)="(.+?)"/g,(a,k,v)=>{
            v = v.replace(/[\d\.]+/g,d=>d * 10)
            return `${k}="${v}"`
        });
        console.log(logoSVGText)

        logoSVGText = `'data:image/svg+xml,${encodeURIComponent(logoSVGText)}'`;
        return logoSVGText
    })
    writeFileSync('dist/i.css',cssText,'utf8');
    
    // copyFileSync('html/logo.svg','dist/logo.svg');
}


build();